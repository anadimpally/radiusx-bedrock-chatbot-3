name: Deploy RadiusX Bedrock ChatBot

on:
  push:
    branches: [v2-radiusx]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  STACK_NAME: "CodeBuildForDeploy"
  REPO_URL: "https://github.com/PREDICTif/radiusx-bedrock-chatbot.git"
  VERSION: "v2-radiusx"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://deploy.yml

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file deploy.yml \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              AllowSelfRegister="true" \
              EnableLambdaSnapStart="false" \
              DisableIpv6="false" \
              BedrockRegion="${{ secrets.AWS_REGION }}" \
              RepoUrl="${{ env.REPO_URL }}" \
              Version="${{ env.VERSION }}"

      - name: Wait for stack completion and start CodeBuild
        run: |
          echo "Waiting for stack creation to complete..."
          while true; do
            status=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].StackStatus' --output text)
            if [[ "$status" == "CREATE_COMPLETE" || "$status" == "UPDATE_COMPLETE" ]]; then
              break
            elif [[ "$status" == "ROLLBACK_COMPLETE" || "$status" == "DELETE_FAILED" || "$status" == "CREATE_FAILED" ]]; then
              echo "Stack creation failed with status: $status"
              exit 1
            fi
            sleep 10
          done

          outputs=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query 'Stacks[0].Outputs')
          projectName=$(echo $outputs | jq -r '.[] | select(.OutputKey=="ProjectName").OutputValue')

          if [[ -z "$projectName" ]]; then
            echo "Failed to retrieve the CodeBuild project name"
            exit 1
          fi

          echo "Starting CodeBuild project: $projectName..."
          buildId=$(aws codebuild start-build --project-name $projectName --query 'build.id' --output text)

          if [[ -z "$buildId" ]]; then
            echo "Failed to start CodeBuild project"
            exit 1
          fi

          echo "Waiting for the CodeBuild project to complete..."
          while true; do
            buildStatus=$(aws codebuild batch-get-builds --ids $buildId --query 'builds[0].buildStatus' --output text)
            if [[ "$buildStatus" == "SUCCEEDED" ]]; then
              break
            elif [[ "$buildStatus" == "FAILED" || "$buildStatus" == "STOPPED" ]]; then
              echo "Build failed with status: $buildStatus"
              exit 1
            fi
            sleep 30
          done

          buildDetail=$(aws codebuild batch-get-builds --ids $buildId --query 'builds[0].logs.{groupName: groupName, streamName: streamName}' --output json)
          logGroupName=$(echo $buildDetail | jq -r '.groupName')
          logStreamName=$(echo $buildDetail | jq -r '.streamName')

          echo "Build Log Group Name: $logGroupName"
          echo "Build Log Stream Name: $logStreamName"

          echo "Fetch CDK deployment logs..."
          logs=$(aws logs get-log-events --log-group-name $logGroupName --log-stream-name $logStreamName)
          frontendUrl=$(echo "$logs" | grep -o 'FrontendURL = [^ ]*' | cut -d' ' -f3 | tr -d '\n,')

          if [[ ! -z "$frontendUrl" ]]; then
            echo "Frontend URL: $frontendUrl"
            echo "FRONTEND_URL=$frontendUrl" >> $GITHUB_ENV
          fi

      - name: Create deployment status comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const frontendUrl = process.env.FRONTEND_URL;
            if (frontendUrl) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `âœ… Deployment successful!\nFrontend URL: ${frontendUrl}`
              });
            }
